// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

/*
Package pingpong_message is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Message
*/
package pingpong_message

import context "context"
import time "time"

import errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import ptypes1 "github.com/golang/protobuf/ptypes"

import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type MessageORM struct {
	ConversationId int32
	Id             int32
	ImageUrl       string
	SenderId       int32
	SentAt         *time.Time
	Text           string
	Type           int32
}

// TableName overrides the default tablename generated by GORM
func (MessageORM) TableName() string {
	return "messages"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Message) ToORM(ctx context.Context) (MessageORM, error) {
	to := MessageORM{}
	var err error
	if prehook, ok := interface{}(m).(MessageWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.ConversationId = m.ConversationId
	to.Text = m.Text
	to.ImageUrl = m.ImageUrl
	to.Type = int32(m.Type)
	to.SenderId = m.SenderId
	if m.SentAt != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.SentAt); err != nil {
			return to, err
		}
		to.SentAt = &t
	}
	if posthook, ok := interface{}(m).(MessageWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *MessageORM) ToPB(ctx context.Context) (Message, error) {
	to := Message{}
	var err error
	if prehook, ok := interface{}(m).(MessageWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.ConversationId = m.ConversationId
	to.Text = m.Text
	to.ImageUrl = m.ImageUrl
	to.Type = Message_MessageType(m.Type)
	to.SenderId = m.SenderId
	if m.SentAt != nil {
		if to.SentAt, err = ptypes1.TimestampProto(*m.SentAt); err != nil {
			return to, err
		}
	}
	if posthook, ok := interface{}(m).(MessageWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Message the arg will be the target, the caller the one being converted from

// MessageBeforeToORM called before default ToORM code
type MessageWithBeforeToORM interface {
	BeforeToORM(context.Context, *MessageORM) error
}

// MessageAfterToORM called after default ToORM code
type MessageWithAfterToORM interface {
	AfterToORM(context.Context, *MessageORM) error
}

// MessageBeforeToPB called before default ToPB code
type MessageWithBeforeToPB interface {
	BeforeToPB(context.Context, *Message) error
}

// MessageAfterToPB called after default ToPB code
type MessageWithAfterToPB interface {
	AfterToPB(context.Context, *Message) error
}

// DefaultCreateMessage executes a basic gorm create call
func DefaultCreateMessage(ctx context.Context, in *Message, db *gorm1.DB) (*Message, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type MessageORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MessageORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadMessage executes a basic gorm read call
func DefaultReadMessage(ctx context.Context, in *Message, db *gorm1.DB) (*Message, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &MessageORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := MessageORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(MessageORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type MessageORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MessageORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MessageORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteMessage(ctx context.Context, in *Message, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&MessageORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type MessageORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MessageORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteMessageSet(ctx context.Context, in []*Message, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []int32{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&MessageORM{})).(MessageORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&MessageORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&MessageORM{})).(MessageORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type MessageORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Message, *gorm1.DB) (*gorm1.DB, error)
}
type MessageORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Message, *gorm1.DB) error
}

// DefaultStrictUpdateMessage clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateMessage(ctx context.Context, in *Message, db *gorm1.DB) (*Message, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateMessage")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &MessageORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(MessageORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type MessageORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MessageORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MessageORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchMessage executes a basic gorm update call with patch behavior
func DefaultPatchMessage(ctx context.Context, in *Message, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Message, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj Message
	var err error
	if hook, ok := interface{}(&pbObj).(MessageWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadMessage(ctx, &Message{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(MessageWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskMessage(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(MessageWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateMessage(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(MessageWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type MessageWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Message, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type MessageWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Message, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type MessageWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Message, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type MessageWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Message, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetMessage executes a bulk gorm update call with patch behavior
func DefaultPatchSetMessage(ctx context.Context, objects []*Message, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*Message, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Message, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchMessage(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskMessage patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskMessage(ctx context.Context, patchee *Message, patcher *Message, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Message, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"ConversationId" {
			patchee.ConversationId = patcher.ConversationId
			continue
		}
		if f == prefix+"Text" {
			patchee.Text = patcher.Text
			continue
		}
		if f == prefix+"ImageUrl" {
			patchee.ImageUrl = patcher.ImageUrl
			continue
		}
		if f == prefix+"Type" {
			patchee.Type = patcher.Type
			continue
		}
		if f == prefix+"SenderId" {
			patchee.SenderId = patcher.SenderId
			continue
		}
		if f == prefix+"SentAt" {
			patchee.SentAt = patcher.SentAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListMessage executes a gorm list call
func DefaultListMessage(ctx context.Context, db *gorm1.DB) ([]*Message, error) {
	in := Message{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &MessageORM{}, &Message{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []MessageORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(MessageORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Message{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type MessageORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MessageORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type MessageORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]MessageORM) error
}
